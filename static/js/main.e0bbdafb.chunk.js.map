{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","App.module.css","components/Notification/Notification.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","totalFn","className","s","statUl","statLi","defaultProps","FeedbackOptions","options","onLeaveFeedback","key","Object","keys","buttons","map","e","type","button","onClick","charAt","toUpperCase","slice","Section","title","children","App","useState","setgood","setneutral","setbad","prevState","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,kBCA/DD,EAAOC,QAAU,CAAC,QAAU,iCAAiC,OAAS,kC,iBCAtED,EAAOC,QAAU,CAAC,IAAM,mB,qICITC,EAHM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,K,gBCCRC,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACzCC,EAAUL,EAAOC,EAAUC,EACjC,OACE,8BACe,IAAZG,EACC,qBAAIC,UAAWC,IAAEC,OAAjB,UACE,qBAAIF,UAAWC,IAAEE,OAAjB,mBAAgCT,KAChC,qBAAIM,UAAWC,IAAEE,OAAjB,sBAAmCR,KACnC,qBAAIK,UAAWC,IAAEE,OAAjB,kBAA+BP,KAC/B,qBAAII,UAAWC,IAAEE,OAAjB,oBAAiCN,EAAME,MACvC,qBAAIC,UAAWC,IAAEE,OAAjB,gCACsBL,EAAmBC,GADzC,UAKF,cAAC,EAAD,CAAcP,QAAQ,yBAK9BC,EAAWW,aAAe,CACxBV,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAWPL,Q,gBCnBAY,EAlBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAMC,OAAOC,KAAKJ,GAExB,OACE,qBAAKN,UAAWC,IAAEU,QAAlB,SACGH,EAAII,KAAI,SAAAC,GAAC,OACR,wBAEEC,KAAK,SACLd,UAAWC,IAAEc,OACbC,QAAS,kBAAMT,EAAgBM,IAJjC,SAMGA,EAAEI,OAAO,GAAGC,cAAgBL,EAAEM,MAAM,IALhCN,SCAAO,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCAQ,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrB9B,EADqB,KACf+B,EADe,OAEED,mBAAS,GAFX,mBAErB7B,EAFqB,KAEZ+B,EAFY,OAGNF,mBAAS,GAHH,mBAGrB5B,EAHqB,KAGhB+B,EAHgB,KAqB5B,OACE,sBAAK3B,UAAWC,IAAEsB,IAAlB,UACE,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEf,QAAS,CAAEZ,OAAMC,UAASC,OAC1BW,gBAbc,SAAAM,GACV,SAANA,EACFY,GAAQ,SAAAG,GAAS,OAAIA,EAAY,KAClB,QAANf,EACTc,GAAO,SAAAC,GAAS,OAAIA,EAAY,KACjB,YAANf,GAAiBa,GAAW,SAAAE,GAAS,OAAIA,EAAY,UAW9D,cAAC,EAAD,CAASP,MAAM,aAAf,SACE,cAAC,EAAD,CACE3B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MA7BmB,SAAAgB,GACzB,OAAOA,GA6BDf,mBA1BgC,SAAAe,GACtC,OAAOgB,KAAKC,MAAc,IAAPpC,EAAcmB,WChBrC,IAYekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnB,EAAD,MAEFoB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e0bbdafb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statLi\":\"Statistics_statLi__gQevZ\",\"statUl\":\"Statistics_statUl__32b0j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"FeedbackOptions_buttons__2qTWo\",\"button\":\"FeedbackOptions_button__3n-hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <h2>{message}</h2>;\n};\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import Notification from '../Notification/Notification';\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  const totalFn = good + neutral + bad;\n  return (\n    <div>\n      {totalFn !== 0 ? (\n        <ul className={s.statUl}>\n          <li className={s.statLi}>Good: {good}</li>\n          <li className={s.statLi}>Neutral: {neutral}</li>\n          <li className={s.statLi}>Bad: {bad}</li>\n          <li className={s.statLi}>Total: {total(totalFn)}</li>\n          <li className={s.statLi}>\n            Positive feetback: {positivePercentage(totalFn)}%\n          </li>\n        </ul>\n      ) : (\n        <Notification message=\"No feedback given\" />\n      )}\n    </div>\n  );\n};\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.func,\n  positivePercentage: PropTypes.func,\n};\n\nexport default Statistics;\n","import s from './FeedbackOptions.module.css';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  const key = Object.keys(options);\n\n  return (\n    <div className={s.buttons}>\n      {key.map(e => (\n        <button\n          key={e}\n          type=\"button\"\n          className={s.button}\n          onClick={() => onLeaveFeedback(e)}\n        >\n          {e.charAt(0).toUpperCase() + e.slice(1)}\n        </button>\n      ))}\n    </div>\n  );\n};\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import s from './App.module.css';\nimport React, { useState } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\n\nexport default function App() {\n  const [good, setgood] = useState(0);\n  const [neutral, setneutral] = useState(0);\n  const [bad, setbad] = useState(0);\n\n  const countTotalFeedback = e => {\n    return e;\n  };\n\n  const countPositiveFeedbackPercentage = e => {\n    return Math.round((good * 100) / e);\n  };\n\n  const leaveFeedback = e => {\n    if (e === 'good') {\n      setgood(prevState => prevState + 1);\n    } else if (e === 'bad') {\n      setbad(prevState => prevState + 1);\n    } else if (e === 'neutral') setneutral(prevState => prevState + 1);\n  };\n\n  return (\n    <div className={s.App}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, neutral, bad }}\n          onLeaveFeedback={leaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback}\n          positivePercentage={countPositiveFeedbackPercentage}\n        />\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}